Creating ts config file
tsc --init

modifying the target with "ctrl" + "space bar" in the tsconfig.json target section
"target": ""
Really depends on where you want to deploy your application

"rootDir": "./src",  
is for source files "./" represents the current folder

"outDir": "./",
is used to specify the directory that will contain our javascript files 

"removeComments": true, 
When enabled the TypeScript compiler is going to remove all the comments that we add
in our TypeScript code so that the generated javascript code is going to be shorter

"noEmitOnError": true,
Prevents the TypeScript compiler from generating any javascript files

"sourceMap": true,
specifies how each line of our TypeScript code maps to the generated
javascript code

ISSUES
tsc.ps1 cannot be loaded because running scripts is disabled on this system
Run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
in powershell as administrator

Type Any is a type that defeats the purpose of TypeScript. As we use Typescript
for type safety

Typescript config links:
https://www.typescriptlang.org/tsconfig/#strict

We can set "noImplicitAny": false, to allow us to not use types when declaring variables
 
Restrict tuples to only 2 values. As it's best to keep trakc of key-value pairs

By default the typescript compiler assigns the first member the value of zero.

definig enums with const will generate more optimized javascript code.

executed: tsc
executing javascript file: node dist/index.js 
directory: TypeScript\hello-world

executed: tsc
directory: TypeScript>

"noUnusedParameters": true, to notify us if the variable in the function is not used.

"noImplicitReturns": true, used to ensure we return a value in a function

"noUnusedLocals": true, warn users that there are unused variables

readonly modifier, we are no longer allowed to change the value of a property

Initializing strings can be done by using "" or '' 

never set "strictNullChecks": false, as it removes type safety

"allowUnreachableCode": false, we are not allowing unreachable code

Access Modifiers: public, private, and protected